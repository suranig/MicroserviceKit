# Windows Dockerfile for local development
# Build arguments
ARG VERSION=1.0.0

# Build stage
FROM mcr.microsoft.com/dotnet/sdk:8.0.16-windowsservercore-ltsc2022 AS build
WORKDIR /src

# Copy csproj files and restore dependencies (layer caching optimization)
COPY ["src/Api/TestService.Api/TestService.Api.csproj", "src/Api/TestService.Api/"]
COPY ["src/Application/TestService.Application/TestService.Application.csproj", "src/Application/TestService.Application/"]
COPY ["src/Infrastructure/TestService.Infrastructure/TestService.Infrastructure.csproj", "src/Infrastructure/TestService.Infrastructure/"]
COPY ["src/Domain/TestService.Domain/TestService.Domain.csproj", "src/Domain/TestService.Domain/"]

# Restore dependencies
RUN dotnet restore "src/Api/TestService.Api/TestService.Api.csproj"

# Copy source code and build
COPY . .
WORKDIR "/src/src/Api/TestService.Api"
RUN dotnet build "TestService.Api.csproj" -c Release -o /app/build --no-restore

# Publish stage
FROM build AS publish
RUN dotnet publish "TestService.Api.csproj" -c Release -o /app/publish --no-restore /p:UseAppHost=false

# Runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0.16-windowsservercore-ltsc2022 AS final
WORKDIR /app

# Copy published app
COPY --from=publish /app/publish .

# Copy health check script
COPY deployment/docker/healthcheck.ps1 /app/healthcheck.ps1

# Configure environment
ARG VERSION=1.0.0
ENV ASPNETCORE_ENVIRONMENT=Production \
    ASPNETCORE_URLS=http://+:8080 \
    DOTNET_RUNNING_IN_CONTAINER=true \
    DOTNET_USE_POLLING_FILE_WATCHER=true \
    ASPNETCORE_FORWARDEDHEADERS_ENABLED=true \
    SERVICE_VERSION=$VERSION

# Add version label
LABEL version=$VERSION \
      service="testservice" \
      maintainer="Generated by MicroserviceKit"

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD powershell -File /app/healthcheck.ps1

ENTRYPOINT ["dotnet", "TestService.Api.dll"]