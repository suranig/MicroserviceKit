# Cursor Rules for MicroserviceKit - Open Source Microservice Generator

## Project Overview
You are working on **MicroserviceKit**, an open source .NET 8 microservice generator that creates production-ready microservices following Domain-Driven Design (DDD), Clean Architecture, and CQRS patterns. This project generates complete microservices with testing, containerization, and deployment capabilities.

## Core Principles & Architecture

### 1. Clean Architecture & DDD
- **ALWAYS** follow Clean Architecture layers: Domain → Application → Infrastructure → API
- **ENFORCE** Domain-Driven Design patterns: Aggregates, Entities, Value Objects, Domain Events
- **MAINTAIN** dependency inversion: outer layers depend on inner layers, never the reverse
- **IMPLEMENT** rich domain models with business logic encapsulated in entities and aggregates
- **USE** Repository pattern for data access abstraction
- **APPLY** Unit of Work pattern for transaction management

### 2. CQRS (Command Query Responsibility Segregation)
- **SEPARATE** commands (write operations) from queries (read operations)
- **IMPLEMENT** custom CQRS pattern with dependency injection
- **CREATE** command handlers for business operations
- **BUILD** query handlers for data retrieval
- **APPLY** different models for read and write operations when beneficial
- **HANDLE** domain events through custom event dispatcher

### 3. Microservices Patterns
- **DESIGN** for single responsibility and bounded contexts
- **IMPLEMENT** API versioning for backward compatibility
- **USE** health checks for service monitoring
- **APPLY** circuit breaker patterns for resilience
- **IMPLEMENT** distributed tracing and logging
- **DESIGN** for eventual consistency between services
- **IMPLEMENT** event-driven architecture with publishers and consumers
- **USE** outbox pattern for reliable message publishing
- **APPLY** saga patterns for distributed transactions

## Technology Stack (Open Source Only)

### Excluded Commercial/Restrictive Libraries
- **NO MediatR** - Use custom CQRS implementation with built-in DI
- **NO AutoMapper** - Use manual mapping, record types, or extension methods
- **NO Prometheus/Grafana** - Use ASP.NET Core built-in metrics and health checks
- **Prefer** built-in .NET solutions over third-party when possible

### Core Framework
- **.NET 8.0.16** - Latest LTS with security patches
- **ASP.NET Core** - Web API framework
- **Entity Framework Core** - ORM for data access
- **Built-in DI Container** - Microsoft.Extensions.DependencyInjection
- **System.Text.Json** - JSON serialization (no AutoMapper needed)

### Testing
- **xUnit** - Unit testing framework
- **FluentAssertions** - Assertion library
- **Testcontainers** - Integration testing with containers
- **Bogus** - Test data generation
- **NSubstitute** - Mocking framework (open source alternative to Moq)

### Containerization & Orchestration
- **Docker** - Containerization
- **Kubernetes** - Container orchestration
- **Built-in Metrics** - ASP.NET Core built-in metrics and health checks
- **Structured Logging** - Microsoft.Extensions.Logging with Serilog

### Databases (Open Source)
- **PostgreSQL** - Primary relational database
- **Redis** - Caching and session storage
- **MongoDB** - Document database (when needed)

### Message Queues & Event Streaming (Open Source)
- **RabbitMQ** - Primary message broker for events and commands
- **MassTransit** - .NET messaging framework with RabbitMQ transport
- **Wolverine** - Modern messaging with source generators (alternative)
- **CAP (DotNetCore.CAP)** - Outbox pattern and distributed transactions
- **Apache Kafka** - Event streaming for high-throughput scenarios

## Code Quality Standards

### 1. C# Coding Standards
- **USE** C# 12 features and nullable reference types
- **FOLLOW** Microsoft C# coding conventions
- **IMPLEMENT** async/await patterns correctly
- **USE** record types for DTOs and value objects
- **APPLY** pattern matching and switch expressions
- **IMPLEMENT** proper exception handling with custom exceptions

### 2. Architecture Patterns
- **IMPLEMENT** Repository pattern with generic base repository
- **USE** Specification pattern for complex queries
- **APPLY** Factory pattern for entity creation
- **IMPLEMENT** Strategy pattern for business rules
- **USE** Decorator pattern for cross-cutting concerns
- **APPLY** Observer pattern through custom domain event dispatcher
- **AVOID** AutoMapper - use manual mapping or record types for DTOs

### 3. Performance & Scalability
- **OPTIMIZE** database queries with proper indexing
- **IMPLEMENT** caching strategies (Redis, in-memory)
- **USE** async programming for I/O operations
- **APPLY** pagination for large data sets
- **IMPLEMENT** connection pooling and resource management
- **OPTIMIZE** serialization with System.Text.Json

## Security Best Practices

### 1. Authentication & Authorization
- **IMPLEMENT** JWT token-based authentication
- **USE** role-based and policy-based authorization
- **APPLY** principle of least privilege
- **IMPLEMENT** secure token storage and refresh mechanisms
- **USE** HTTPS everywhere with proper certificate management

### 2. Data Protection
- **ENCRYPT** sensitive data at rest and in transit
- **IMPLEMENT** proper input validation and sanitization
- **USE** parameterized queries to prevent SQL injection
- **APPLY** rate limiting to prevent abuse
- **IMPLEMENT** audit logging for security events

### 3. Container Security
- **USE** non-root users in containers
- **IMPLEMENT** read-only file systems where possible
- **APPLY** resource limits and security contexts
- **SCAN** container images for vulnerabilities
- **USE** minimal base images (Alpine, Distroless)

## Testing Strategy

### 1. Test Pyramid
- **WRITE** comprehensive unit tests (70% coverage minimum)
- **CREATE** integration tests for API endpoints and database operations
- **IMPLEMENT** end-to-end tests for critical user journeys
- **USE** contract testing for service boundaries

### 2. Test Patterns
- **FOLLOW** AAA pattern (Arrange, Act, Assert)
- **USE** test builders for complex object creation
- **IMPLEMENT** test fixtures for shared setup
- **CREATE** test utilities for common operations
- **USE** parameterized tests for multiple scenarios

### 3. Test Data Management
- **USE** Testcontainers for database integration tests
- **IMPLEMENT** test data builders with Bogus
- **CREATE** seed data for consistent test scenarios
- **CLEAN** test data between test runs

## DevOps & Deployment

### 1. Containerization
- **CREATE** multi-stage Dockerfiles for optimization
- **IMPLEMENT** health checks in containers
- **USE** .dockerignore for build optimization
- **APPLY** layer caching strategies
- **IMPLEMENT** graceful shutdown handling

### 2. Kubernetes Deployment
- **CREATE** proper resource limits and requests
- **IMPLEMENT** liveness and readiness probes
- **USE** ConfigMaps and Secrets for configuration
- **APPLY** horizontal pod autoscaling (HPA)
- **IMPLEMENT** pod disruption budgets

### 3. Monitoring & Observability
- **IMPLEMENT** structured logging with correlation IDs using Serilog
- **USE** ASP.NET Core built-in metrics and health checks
- **CREATE** custom health checks with Microsoft.Extensions.Diagnostics.HealthChecks
- **IMPLEMENT** distributed tracing with System.Diagnostics.Activity
- **LOG** performance metrics and application events

## Custom CQRS Implementation

### 1. Command/Query Interfaces
- **CREATE** ICommand, IQuery<TResult>, ICommandHandler<TCommand>, IQueryHandler<TQuery, TResult>
- **IMPLEMENT** command and query dispatchers using built-in DI container
- **USE** generic constraints and interfaces for type safety
- **APPLY** decorator pattern for cross-cutting concerns (validation, logging)

### 2. Domain Events
- **IMPLEMENT** custom IDomainEvent interface and event dispatcher
- **USE** built-in DI container for event handler registration
- **APPLY** async event handling with proper error handling
- **MAINTAIN** event ordering and transaction boundaries

### 3. Data Mapping
- **CREATE** extension methods for entity-to-DTO mapping
- **USE** record types for immutable DTOs
- **IMPLEMENT** explicit mapping methods instead of AutoMapper
- **APPLY** projection patterns for read models

## Event-Driven Architecture & Messaging

### 1. Message Patterns
- **IMPLEMENT** publish-subscribe patterns for domain events
- **USE** command patterns for direct service communication
- **APPLY** request-response patterns when synchronous communication needed
- **DESIGN** event schemas with versioning support
- **MAINTAIN** message contracts in shared libraries or schemas

### 2. Publishers & Consumers
- **CREATE** domain event publishers integrated with aggregates
- **IMPLEMENT** message consumers with proper error handling
- **USE** competing consumers pattern for scalability
- **APPLY** message routing based on content and context
- **HANDLE** poison messages with dead letter queues

### 3. Messaging Infrastructure
- **CONFIGURE** RabbitMQ with exchanges, queues, and bindings
- **IMPLEMENT** connection management and retry policies
- **USE** transactional outbox for reliable message publishing
- **APPLY** idempotent message processing
- **MONITOR** message flow and processing metrics

### 4. Event Sourcing (Optional)
- **STORE** domain events as source of truth
- **BUILD** projections from event streams
- **IMPLEMENT** event replay capabilities
- **USE** snapshots for performance optimization
- **MAINTAIN** event schema evolution strategies

## Code Generation Patterns

### 1. Template Engine
- **MAINTAIN** clean separation between template logic and generated code
- **IMPLEMENT** configurable code generation based on architecture levels
- **USE** consistent naming conventions across generated code
- **APPLY** proper namespace organization
- **GENERATE** comprehensive documentation

### 2. Module System
- **CREATE** modular template system with clear interfaces
- **IMPLEMENT** dependency injection for template modules
- **USE** configuration-driven feature enablement
- **APPLY** extensible architecture for new modules
- **MAINTAIN** backward compatibility

### 3. CLI Design
- **IMPLEMENT** intuitive command-line interface
- **USE** interactive mode for better user experience
- **PROVIDE** comprehensive help and examples
- **IMPLEMENT** configuration validation with helpful error messages
- **SUPPORT** both interactive and scripted usage

### 4. CLI Testing Guidelines
- **ALWAYS** test CLI commands in dedicated `test_cli/` directory
- **CREATE** separate test directories for different scenarios (e.g., `test_cli/basic/`, `test_cli/enterprise/`)
- **CLEAN** test directories before each test run
- **VERIFY** generated code compiles and runs correctly
- **TEST** both interactive and non-interactive modes
- **VALIDATE** all generated files and project structure
- **DOCUMENT** test scenarios and expected outcomes

## Error Handling & Resilience

### 1. Exception Management
- **CREATE** custom exception types for domain-specific errors
- **IMPLEMENT** global exception handling middleware
- **USE** proper HTTP status codes for API responses
- **LOG** exceptions with sufficient context
- **AVOID** exposing sensitive information in error messages

### 2. Resilience Patterns
- **IMPLEMENT** retry policies with exponential backoff
- **USE** circuit breaker pattern for external dependencies
- **APPLY** timeout policies for operations
- **IMPLEMENT** bulkhead isolation for critical resources
- **USE** graceful degradation when possible

### 3. Monitoring & Alerting
- **TRACK** error rates and response times using built-in metrics
- **IMPLEMENT** health check endpoints with Microsoft.Extensions.Diagnostics.HealthChecks
- **CREATE** custom metrics using System.Diagnostics.Metrics
- **LOG** critical failures with structured logging
- **MONITOR** resource utilization through health checks

## Documentation Standards

### 1. Code Documentation
- **WRITE** XML documentation for public APIs
- **CREATE** architectural decision records (ADRs)
- **MAINTAIN** up-to-date README files
- **DOCUMENT** configuration options and examples
- **PROVIDE** troubleshooting guides

### 2. API Documentation
- **GENERATE** OpenAPI/Swagger documentation
- **INCLUDE** request/response examples
- **DOCUMENT** authentication requirements
- **PROVIDE** SDK examples in multiple languages
- **MAINTAIN** versioned API documentation

## Performance Guidelines

### 1. Database Optimization
- **DESIGN** efficient database schemas with proper indexing
- **USE** query optimization techniques
- **IMPLEMENT** connection pooling
- **APPLY** read replicas for read-heavy workloads
- **MONITOR** query performance and optimize slow queries

### 2. Caching Strategies
- **IMPLEMENT** multi-level caching (in-memory, distributed)
- **USE** cache-aside pattern for data access
- **APPLY** proper cache invalidation strategies
- **IMPLEMENT** cache warming for critical data
- **MONITOR** cache hit rates and performance

### 3. API Performance
- **IMPLEMENT** response compression
- **USE** efficient serialization (System.Text.Json)
- **APPLY** pagination for large datasets
- **IMPLEMENT** rate limiting and throttling
- **OPTIMIZE** payload sizes and reduce round trips

## Specific Project Guidelines

### 1. Template Generation
- **ENSURE** generated code follows all architecture principles
- **IMPLEMENT** proper dependency injection setup
- **CREATE** comprehensive test coverage in generated projects
- **GENERATE** production-ready Docker and Kubernetes configurations
- **INCLUDE** monitoring and health check setup

### 2. Module Development
- **FOLLOW** consistent module interface patterns
- **IMPLEMENT** proper error handling in generation logic
- **USE** configuration-driven feature enablement
- **MAINTAIN** clean separation of concerns
- **TEST** module functionality thoroughly

### 3. CLI Tool
- **PROVIDE** clear and helpful command-line interface
- **IMPLEMENT** proper validation and error messages
- **SUPPORT** both interactive and automated usage
- **MAINTAIN** backward compatibility
- **DOCUMENT** all commands and options

## Open Source Best Practices

### 1. Community Guidelines
- **FOLLOW** semantic versioning for releases
- **MAINTAIN** clear contribution guidelines
- **PROVIDE** issue and pull request templates
- **IMPLEMENT** automated testing and CI/CD
- **DOCUMENT** project roadmap and decisions

### 2. Code Quality
- **ENFORCE** consistent code formatting
- **IMPLEMENT** automated code analysis
- **MAINTAIN** high test coverage
- **REVIEW** all code changes thoroughly
- **DOCUMENT** breaking changes and migration guides

### 3. Licensing & Dependencies
- **USE** only open source dependencies with compatible licenses
- **MAINTAIN** license compatibility matrix
- **DOCUMENT** all third-party dependencies
- **AVOID** proprietary or restrictive licenses
- **KEEP** dependency versions up to date

## Git Workflow & Commit Guidelines

### 1. Gradual Commits
- **COMMIT** changes incrementally, not all at once
- **GROUP** related changes into logical commits
- **SEPARATE** different types of changes (features, fixes, docs, tests)
- **COMMIT** frequently during development sessions
- **USE** meaningful commit messages following conventional commits

### 2. Commit Message Format
- **FOLLOW** conventional commit format: `type(scope): description`
- **USE** types: feat, fix, docs, style, refactor, test, chore
- **INCLUDE** scope when relevant (cli, core, modules, tests)
- **WRITE** clear, concise descriptions in English
- **ADD** body and footer for complex changes

### 3. Commit Strategy
- **COMMIT** configuration changes separately from code changes
- **COMMIT** new modules separately from existing module updates
- **COMMIT** documentation updates separately from implementation
- **COMMIT** test infrastructure separately from feature code
- **REVIEW** git status before each commit to ensure clean history

## Remember
- **PRIORITIZE** code quality and maintainability over quick fixes
- **THINK** about scalability and performance from the beginning
- **DESIGN** for testability and observability
- **CONSIDER** the impact on generated microservices
- **MAINTAIN** consistency across all generated code
- **FOLLOW** open source best practices and community standards

This is an expert-level project that generates production-ready microservices. Every decision should reflect enterprise-grade quality and best practices while maintaining simplicity and usability for developers. 